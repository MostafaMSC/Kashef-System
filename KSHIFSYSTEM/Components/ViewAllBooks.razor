@page "/viewBooks"
@* @using Append.Blazor.Printing
@inject IPrintingService PR *@
@inject IDawa _Dawa
@inject ITarsheh _Tarsheh

@inject IJSRuntime _js
@inject ISnackbar _Sb
@inject IDialogService _Dialog
@inject NavigationManager _Nav
@attribute [Authorize(Roles = "admin,eatalaJazaea,DawaView")]
<PageTitle> الكتب الواردة</PageTitle>
 <div id="Area1">
    <center><MudText Style="color:white" Typo="Typo.h4"><b>جدول الكتب</b></MudText></center>
    <br />
    <MudDataGrid Striped="true" Elevation="18"
                 Style="background-color:whitesmoke; border:solid;padding:20px;border-color:lightblue;border-radius:20px;margin-left:20px ;margin-right:20px"
                 T="BookInfo" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="false"
                 Hover="true" Hideable="true" QuickFilter="@_quickFilter" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField FullWidth @bind-Value="_searchString" Placeholder="بحث" Adornment="Adornment.Start" Immediate="true"
                           Style="background-color:white" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

                       <MudButton @onclick="DeleteDawas" Variant="Variant.Filled" style="margin-right:40px" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudButton>
             <MudButton @onclick='() => _Nav.NavigateTo("/WaredBookPrint")' Variant="Variant.Filled" style="margin-right:40px" StartIcon="@Icons.Material.Filled.Print" Color="Color.Tertiary"></MudButton>
             <MudButton @onclick="printSelectedItem" Variant="Variant.Filled" style="margin-right:40px" StartIcon="@Icons.Material.Filled.Print" Color="Color.Tertiary">اطبع المحدد فقط</MudButton>

         </ToolBarContent>
        <Columns>
            <SelectColumn T="BookInfo" />

            <PropertyColumn  Property="x => x.BookNo" Title="رقم الكتاب" Sortable="true" Filterable="false" />
            <PropertyColumn  Format="dd.MM.yyyy" Property="x => x.BookDate" Title=" تاريخ الكتاب" />
             <PropertyColumn Property="x => x.HayaBookNo" Title="رقم كتاب الوارد" Sortable="true" Filterable="false" />
             <PropertyColumn Format="dd.MM.yyyy" Property="x => x.HayaBookDate" Title=" تاريخ كتاب الوارد" />

            <PropertyColumn Property="x => x.JahaName" Title="اسم الجهة" />
            <PropertyColumn Property="x => x.PlaceNo" Title="رقم القطعة" />
             <PropertyColumn Property="x => x.MokataNO" Title="رقم المقاطعة" />

            <PropertyColumn Property="x => x.AlwasilNo" Title="رقم الوصل" />
             <PropertyColumn Format="dd.MM.yyyy" Property="x => x.AlwasilDate" Title="تاريخ الوصل" />

            <PropertyColumn Property="x => x.City" Title="المحافظة" />
            <PropertyColumn Property="x => x.KashefType" Title="نوع الكشف" />
             <PropertyColumn Property="x => x.AddadAlkhobraa" Title="عدد الخبراء " />

             <PropertyColumn Format="dd.MM.yyyy" Property="x => x.KshefDate" Title=" تاريخ الكشف" />
             <PropertyColumn Property="x => x.AstmaraNoP" Title="رقم استمارةالمواطنين" Sortable="true" Filterable="false" />
             <PropertyColumn Property="x => x.AstmaraNoM" Title="رقم الموجودات" Sortable="true" Filterable="false" />
             <PropertyColumn Format="dd.MM.yyyy" Property="x => x.AstmaraDateP" Title=" تاريخ استمارة المواطنين" />
             <PropertyColumn Format="dd.MM.yyyy" Property="x => x.AstmaraDateM" Title=" تاريخ استمارة الموجودات" />
             <PropertyColumn Property="x => x.Update_Date" Title=" تاريخ التحديث" />
             <PropertyColumn Property="x => x.UserName" Title=" اسم المستخدم " />

             <TemplateColumn>

                 <CellTemplate>
                     <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.EditNote" OnClick="(()=>StartedEditingItemFunction(context.Item))" />
                 </CellTemplate>
             </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="BookInfo" />
        </PagerContent>
    </MudDataGrid>
</div>

 <MudScrollToTop>
     <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
 </MudScrollToTop>

 
<div id="Area2" class="print-table" style="display:none" >
         <MudTable Bordered="true" Items="@ListOfDeletedBooks" Hover="true" Breakpoint="Breakpoint.Sm">
             <HeaderContent>
             <MudTh>رقم الكتاب</MudTh>
             <MudTh>تاريخ الكتاب</MudTh>
             <MudTh> رقم وارد الهيئة</MudTh>
             <MudTh> تاريخ وارد الهيئة</MudTh>
             <MudTh>اسم الجهة</MudTh>
             <MudTh>رقم القطعة</MudTh>
             <MudTh>رقم المقاطعة</MudTh>
             <MudTh> رقم الوصل</MudTh>
             <MudTh> تاريخ الوصل</MudTh>
             <MudTh> المحافظة</MudTh>
             <MudTh> نوع الكشف</MudTh>
             <MudTh> تاريخ الكشف</MudTh>
             <MudTh> عدد الخبراء</MudTh>
             <MudTh> رقم استمارة المواطنين</MudTh>
             <MudTh> رقم استمارة المواطنين</MudTh>
             <MudTh> تاريخ استمارة الموجودات</MudTh>
             <MudTh> تاريخ استمارة الموجودات</MudTh>
             <MudTh> تاريخ التحديث</MudTh>
             <MudTh> اسم المستخدم</MudTh>



             </HeaderContent>
             <RowTemplate>
             <MudTd DataLabel="رقم الكتاب">@context.BookNo</MudTd>
                <MudTd DataLabel="تاريخ الكتاب" Format="dd.MM.yyyy">@context.BookDate.Value.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel="رقم كتاب الهيئة">@context.HayaBookNo</MudTd>

                <MudTd DataLabel="تاريخ كتاب الهيئة">@context.HayaBookDate.Value.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel="اسم الجهة">@context.JahaName</MudTd>

                <MudTd DataLabel="رقم القطعة">@context.PlaceNo</MudTd>
                <MudTd DataLabel="رقم المقاطعة">@context.MokataNO</MudTd>
                <MudTd DataLabel="رقم الوصل">@context.AlwasilNo</MudTd>
                <MudTd DataLabel="تاريخ الوصل">@context.AlwasilDate.Value.ToString("yyyy-MM-dd")</MudTd>

                <MudTd DataLabel="المحافظة">@context.City</MudTd>
                <MudTd DataLabel="نوع الكشف">@context.KashefType</MudTd>
                <MudTd DataLabel="تاريخ الكشف">@context.KshefDate.Value.ToString("yyyy-MM-dd")</MudTd>

                <MudTd DataLabel="عدد الخبراء">@context.AddadAlkhobraa</MudTd>
                <MudTd DataLabel="رقم استمارة الموجودات">@context.AstmaraNoM</MudTd>
                <MudTd DataLabel="رقم استمارة المواطنين">@context.AstmaraNoP</MudTd>

                <MudTd DataLabel=" تاريخ استمارةالموجودات">@context.AstmaraDateM.Value.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel=" تاريخ استمارة الموجودات">@context.AstmaraDateP.Value.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel=" تاريخ التحديث">@context.Update_Date</MudTd>
                <MudTd DataLabel="اسم المستخدم">@context.UserName</MudTd>

             </RowTemplate>
         </MudTable>
 </div>


    @code {
    private List<string> _events = new();
    private IEnumerable<BookInfo> Elements = new List<BookInfo>();
    private List<BookInfo> SpecificRecords { get; set; } = new List<BookInfo>();

    public List<BookInfo> ListOfDeletedBooks { get; set; } = new List<BookInfo>();
    private string _searchString;
    private bool _sortNameByLength;
    protected override async Task OnInitializedAsync()
    {
        Elements = await _Dawa.GetAllDawas();
    }
    void RowClicked(DataGridRowClickEventArgs<BookInfo> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<BookInfo> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
        ListOfDeletedBooks = items.ToList();
    }

    private async Task DeleteDawas()
    {
        var Response = await _js.InvokeAsync<bool>("confirm", "هل انت متاكد من الحذف");
        if (Response)
        {
            var BackEndREsponse = await _Dawa.DeleteListOfDawas(ListOfDeletedBooks.Select(a => a.Id).ToList());
            _Sb.Add(BackEndREsponse, Severity.Success);
            Elements = await _Dawa.GetAllDawas();
        }
        else
        {
            return;
        }
    }


    private async void printAll()
    {
        await _js.InvokeAsync<object>("open", new object[]{});
        await _js.InvokeVoidAsync("Print", "Area1");
    }


    private async Task StartedEditingItemFunction(BookInfo item)
    {
        //_Nav.NavigateTo($"/EditEmp/{item.Id}");
        var Parameters = new DialogParameters();
        Parameters.Add("Id", item.Id);
        var ModalOptions = new DialogOptions();
        ModalOptions.MaxWidth = MaxWidth.Medium;
        ModalOptions.FullWidth = true;
        ModalOptions.CloseButton = true;
        ModalOptions.CloseOnEscapeKey = true;
        ModalOptions.Position = DialogPosition.Center;
        bool BookState = await _Tarsheh.CheckIfBookExistsInDB(item.BookNo);
        if (BookState == true)
        {
            await _js.InvokeVoidAsync("alert", "غير مسموح التعديل على الكتاب الذي تم ترشيح الخبراء له بالفعل");
        }
        else
        {


            await _Dialog.ShowAsync<EditEmpDialog>("تحديث الكتاب", Parameters, ModalOptions);
        }


    }
    private Func<BookInfo, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.JahaName.Length;
        else
            return x.BookDate;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<BookInfo, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.JahaName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.BookNo.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($" {x.AlwasilNo} {x.UserName}{x.KashefType} {x.BookDate.ToString()} {x.City}".Contains(_searchString))
            return true;

        if (x.KshefDate.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.AlwasilNo.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
        
    };
    private async void printSelectedItem()
    {
        SpecificRecords = await _Dawa.GetSpecificBooks(ListOfDeletedBooks.Select(a => a.Id).ToList());
        

        await _js.InvokeVoidAsync("print", "Area2");
    }
}